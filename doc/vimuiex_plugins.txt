*vimuiex_plugins.txt*	 Vimuiex Plugins           Last Change: January 2010
			*vimuiex-plugins*

Commands that require "+python" and curses or the "+python_screen" patch:

   VxBufListSelect		    |vimuiex-vxbuflistselect|
   VxOpenRecentFile		    |vimuiex-vxopenrecentfile|
   VxTextMenu			    |vimuiex-vxtextmenu|
   VxFileBrowser		    |vimuiex-vxfilebrowser|
   VxOccur			    |vimuiex-vxoccur|
   VxOccurCurrent		    |vimuiex-vxoccurcurrent|
   VxOccurTags			    |vimuiex-vxoccurtags|
   VxOccurRoutines		    |vimuiex-vxoccurroutines|
   VxSourceTasks		    |vimuiex-vxsourcetasks|
   VxDisplax			    |vimuiex-vxdisplay|
   VxMarks			    |vimuiex-vxmarks|
   VxCmd			    |vimuiex-vxcmd|
   VxMan			    |vimuiex-vxman|

Commands that require "+python_screen":

   VxLineJump			    |vimuiex-vxlinejump|
   VxWindowJump			    |vimuiex-vxwindowjump|

Plugins defined in VxLib:

   Preview for QuickFix window      |vxlib-quickfixpreview|

==============================================================================
POPUP MENU NAVIGATOR				          *vimuiex-popupmenu*

VxTextMenu                                       *vimuiex-vxtextmenu*
----------

Displays a list of top-level menus in a popup listbox. An item from the menu 
can be selected as described in |vimuiex-operation|. When <CR> is pressed on a 
selected item it is activated. If the item is a submenu it will be displayed, 
otherwise a command bound to the menu will be executed. When <BS> is pressed on 
any item, the curent menu is closed an its parent menu is activated.

To start use: >
  :VxTextMenu
<
TODO: add mouse support

Note: The menu initially starts with menu shortcuts enabled. To disable them 
and enter normal listbox navigation mode, press '&'.

==============================================================================
POPUP BUFFER EXPLORER					   *vimuiex-vxbuflist*

VxBufListSelect                                  *vimuiex-vxbuflistselect*
---------------

Displays a list of buffers in an overlapping window. A buffer can be selected 
from the list as described in |vimuiex-operation|. When <CR> is perssed on a 
selected buffer the list is closed an the selected buffer is activated. Other
mappings:

  gs	     Open selected buffer with split
  gv	     Open selected buffer with vsplit
  gt, <c-cr> Open selected buffer in a new tab (if not already visible)
  xd         Delete selected buffer
  xw         Wipeout selected buffer
  os         Change the sort order of buffers
  ou         Toggle display of unlisted buffers

The commands 'gs' and 'gv' can operate on marked buffers. When multiple
buffers are marked in the list (with the 'm' command) they will be opened
horizontally/vertically split.

To start use: >
  :VxBufListSelect
<
==============================================================================
OPEN RECENT FILE                                       *vimuiex-vxrecentfile*

VxOpenRecentFile                                 *vimuiex-vxopenrecentfile*
----------------

Displays a list of recent files in an overlapping window. The filename is
displayed in the first column and the directory in the second column. A file
can be selected from the list as described in |vimuiex-operation|. When <CR>
is perssed on a selected file the list is closed, the file is loaded (if not
already loaded) and activated. A file can also be opened with the following
commands:

  gs	     Open selected file with split
  gv	     Open selected file with vsplit
  gt, <c-cr> Open selected file in a new tab

To start use: >
  :VxOpenRecentFile
<
Settings for the plugin:

   Number of recent files in history: >
   let g:VxRecentFile_size = 50
<

   Exclude the files from history if they match a regular expression: >
   let g:VxRecentFile_exclude = ""
<

   The filenames are case sensitive: >
   let g:VxRecentFile_nocase = 1
<

==============================================================================
BROWSE THE FILESYSTEM TO OPEN A FILE                    *vimuiex-vxdired*

VxFileBrowser                                    *vimuiex-vxfilebrowser*
-------------

Displays the contents of a directory implied by the |browsedir| option. The
subdirectories are displayed with a preceeding '+'. The files are sorted by
name.  A file or a directory can be selected from the list as described in
|vimuiex-operation|. When <CR> is pressed on a selected file, that file is
loaded (if not already loaded) and activated. The selected file can also be
opened with the following commands:

  gs	     Open selected file with split
  gv	     Open selected file with vsplit
  gt, <c-cr> Open selected file in a new tab

If <CR> is pressed on a subdirectory, its contents is displayed in the list.
When <BS> is pressed on any item, the curent directory is closed and its
parent directory is displayed. When changing directories, currently marked
items are unmarked.

If files are marked, they will be open instead of the selected file, unless
the selected item is a directory. In this case a directory change will be
executed.

Pressing 'd' on any item will close the file list and display a list of 
directories from which files were recently loaded. If <CR> is pressed on a 
selected directory, the list of directories will close and the content of the 
selected directory will be displayed in the file list.

If 'e' is pressed the user is prompted for the name of a (new) file to be
open in the currently displayed directory.

Files from subdirectories of the current directory can be displayed in a
single list. To increase the number of subdirectory levels to be displayed
press <C-L>. To decrease press <C-H> and to cancel subdirectory display press
<C-K>. The number of files displayed in the list is limited to approx. 1000
items. When the limit is reached, no new subdirectories are added to the list.
When the filter is active, only the matching files are counted so more
subdirectories are processed. The filesystem is re-read after every filter
change and may take a lot of time, depending on the number of files processed.

The keysequence 'oa' will toggle the visibility of file attributes.

The size of the recent directory list can be changed with: >
   let g:VxRecentDir_size = 20
<

==============================================================================
ENHANCE INTERNAL COMMANDS                              *vimuiex-vxcapture*


VxCmd                                            *vimuiex-vxcmd*
-----

Captures the output of a Vim command and display it in a popup list. Examples:

   Show the list of Vim buffers (see also |vimuiex-vxbuflist|): >
   :VxCmd ls
<
   Show the contents of the current directory (see also |vimuiex-vxdired|): >
   :VxCmd !ls -la
<
Note: VxCmd will fail if the Vim command calls |redir| during execution.



VxMan                                            *vimuiex-vxman*
-----

Captures the output of a man command and displays it in a popuplist. This 
command is a shorthand for: >
   :VxCmd !man -P cat <man-query> | col -b
<
and requires the col program from the bsdmainutils debian package.

To replace the default command K use: >
   nmap <silent> K :VxMan <cword> <CR>
<

VxDisplay					 *vimuiex-vxdisplay*
---------

Displays the contents of the registers (output of the :display command) in a 
popup listbox. If <CR> is pressed on a selected item, the contents of the 
register is pasted into current buffer. If <@> is pressed on a selected item,
the contents of the register will be executed as a macro.


VxMarks						 *vimuiex-vxmarks*
-------

Displays the marks (output of the :marks command) in a popup listbox. If <CR> 
is pressed on a valid mark, the cursor jumps to that mark.



==============================================================================
SHOW OCCURRENCES OF REGULAR EXPRESSIONS                *vimuiex-vxoccur-lib*

A set of commands that search for regular expressions in files. The lines
where matches are found are displayed in a popup listbox. A line can be
selected from the list as described in |vimuiex-operation|. If <CR> is pressed
on a selected line, the listbox is closed and the selected line is displayed.
If 'v' is pressed on a selected line, the line is displayed in a preview
window while the listbox is still shown. ( TODO: the listbox may still cover
the preview window, needs to be resized/moved).


VxOccur                                          *vimuiex-vxoccur*
-------

Prompts for a regular expression to search for and a range of files to process
(|vimuiex-filerange|). The matching lines from the selected range of files are
displayed in the popup listbox. 

The command vimgrep is used to make the search if the file range is other than
the current buffer. In this case the QuikcFix list is populated before the
list is passed to the popup listbox. After the listbox closes, the results are
still available in the QuikcFix list.


VxOccurCurrent                                   *vimuiex-vxoccurcurrent*
--------------

Captures the output of the command '[I' and displays it in the popup listbox.

Suggested keyboard mapping:
>
   nnoremap <silent> [I :VxOccurCurrent<cr>
<
   
VxOccurTags                                      *vimuiex-vxoccurtags*
-----------

Passes the current file to ctags and displays the results in the popup
listbox.


VxOccurRoutines                                  *vimuiex-vxoccurroutines*
---------------

Finds definitions of "routines" in the current buffer. Routines are defiend
with regular expressions (one regexp for each filetype) which are stored in
a global routine definition dictionary.
Example:
>
   " A simple routine regexp for vim mode
   let g:vxoccur_routine_def["vim"] = '\(^\s*\(s:\)\?\(func|function\)!\?\W\)'
<

VxSourceTasks                                    *vimuiex-vxsourcetasks*
-------------

Finds lines with tasks in the selected range of files (|vimuiex-filerange|)
and displays them in a popup listbox. The tasks are marked with special words
which can be defined in a global variable:
>
   let g:vxoccur_task_words=['TODO', 'FIXME', 'BUG']
<
The default task words are: ['COMBAK', 'TODO', 'FIXME', 'XXX']


File ranges used with VxOccur                    *vimuiex-filerange*
-----------------------------

Currently these ranges can be selected:
   -b => current buffer
   -d [filemask, ...] => current buffer directory
   -D [filemask, ...] => current buffer directory and subdirectories
   -w [filemask, ...] => working directory
   -W [filemask, ...] => working directory and subdirectories
   - => use the last used range

The range is entered when Vim displays a prompt like
>
   Range (bdDwW)[-b]: -
<
The available ranges are displayed in () and a part of the last used range is
displayed in []. Different ranges can be entered or selected from history. An
empty range will cancel a VxOccur operation.

Example: search in txt and doc files in current directory and subdirectories:
>
   Range (bdDwW)[-b]: -D *.txt *.doc
<

NOTE:
The prefix '-' is used because input() can't distinguish between an empty
string and a cancelled input. To reuse the last used search range, the user
can press enter after the prompt is displayed if a nonempty default value is
used. The procedure can also recognize a range if it doesn't start with '-',
but it will be added to the history with the prefix '-'.

==============================================================================
JUMP TO SCREEN LOCATION WITH KEYBOARD			   *vimuiex-vxjump*

NOTE: These plugins require "+python_screen" feature

VxLineJump                                       *vimuiex-vxlinejump*
----------

Displays lables in the line-number area and waits for the user to enter a
label. When the label is entered, the cursor moves to the line with the
corresponding label.


VxWindowJump                                     *vimuiex-vxwindowjump*
------------

Displays a label in the center of every window and waits for the user to enter
a label. When the label is entered, the cursor moves to the window with the
corresponding label.



## vim:tw=78:noet:wrap:ts=8:ft=help:norl: